{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\froman\fcharset0 TimesNewRomanPS-BoldMT;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\pard\tx720\sl312\slmult1\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Subsection Max/MSP\
\
\\section\{Background - Programming Music in Max/MSP\}\
\
\\subsection\{The Max Environment\}\
Cycling 74\'92s Max (previously named Max/MSP) is the predominant visual programming environment \
for interactive multi-media in music academia, as well as in commercial music circles through "Max\
 for Live", a version of Max embedded in the Ableton Live digital audio workstation. Created \
originally by Miller Puckette in \{year\} while working at IRCAM, Max was created so that composers\
 of interactive computer music could change their pieces without the assistance of a programmer. Max \
programs ("patches" in the Max nomenclature) are created by placing visual objects on a canvas ("the \
patcher"), and connecting them graphically with visual "patch cords". A Max patch consists of a \
collection of instantiated objects that send messages to each other in a directed graph, producing a \
data-flow execution model whereby a message from a source object triggers execution in one or more \
receiving objects, who in turn send on messages to further objects. Patch execution can be initiated by \
various forms of real-time input, such as keyboard or mouse events, MIDI input, and networking \
events, as well as by scheduled events through objects such as the 
\f1\b metronome
\f0\b0 . Messages are \
represented visually as lists of Max 
\f1\b atoms
\f0\b0 , which may be symbols, integers, or floating point numbers, \
and there exists a Max object for visually displaying and altering messages, the 
\f1\b message-box.
\f0\b0   \
Execution follows a depth first and right-to-left order, enabling the programmer to deterministically \
control the execution flow through the visual layout of the patch cords.  (i.e., A source object sending \
messages out to multiple receiving sub-graphs results in the right hand message path completing \
execution before moving left, rather than spawning two concurrent threads of execution.)  When \
patching, messages can be inspected by sending them to a 
\f1\b print
\f0\b0  object (to print to console), to a \

\f1\b message-box
\f0\b0  object (to update the visual object with the message contents), or though a built in \
debugger (\'93probing\'94).\
\
In addition to the event-based message execution model, Max also supports a stream-based digital \
audio execution model, originally provided separately as 
\f1\b MSP
\f0\b0 , but now included in all Max versions. \
MSP normally runs in a separate thread from the event and message based Max operations, and uses a  \
a separate class of objects that pass constant streams of digital audio to each other through differently \
coloured patch cords. MSP objects may additionally receive messages for controlling paramaters. As  \
S4M executes only the event/message level and does not implement DSP operations, MSP is not \
discussed further here. \
\
\\subsection\{Max externals\}\
While Max itself is a commercial, closed source tool, it includes a software development kit for \
extending Max by writing a Max \'93external\'94. An external is a compiled class that acts as a prototype \
for new objects that can be used in patcher programming just as with the built in objects. Externals are\
developed in C or C++ in an object oriented manner: the older C API using data structures and pointers \
to simulate class-based programming and the more recent C++ API using C++ classes. A typical \
external will implement a class that provides some (optional) object state for instantiated objects, and \
methods for receiving and sending Max messages through the object\'92s inlets and outlets. When the user creates a visual object to the patcher, an instance of the external\'92s class is instantiated in memory. Thus visual programming in the Max patcher manipulates instantiations of objects, whereas programming at the external level in C is concerned with the creation of classes acting as object prototypes, and the creation and reception of messages, but rarely involves programmatically instantiating objects from Max object classes.\
\
Objects are not limited to interacting with Max through messages passing in to inlets and out of outlets. A C API exists that enables objects to query and control various engine components (e.g. the transport mechanism), and it is also possible for objects to send messages to other objects directly or through the scheduler queues, without the sending and receiving objects \
necessarily being connected visually in the patcher. \
\
Extending Max through externals has been possible since very early versions of Max, and thus a rich library of open-source 3
\fs18 \super rd
\fs28 \nosupersub  party extensions exist, of which Scheme For Max is one. \
\
\\subsection\{Max Message and Object Implementation\} \
Internally, Max messages are implemented as pairs of data entities consisting of a symbol (required) \
and an optional array of Max atom structures, where each atom structure contains a member for the \
atom type and another for its value, and the type may be any of: integer, float, or symbol.  The first element of this pair is always a symbol, and is called  the 
\f1\b message selector
\f0\b0 . In the visual patcher, the\
selector may be implicit or explicit. For example, if one creates a 
\f1\b message-box
\f0\b0  object with an integer \
as its visual contents, the user can send this message to receiving objects by clicking on the visual 
\f1\b message-box, 
\f0\b0 or by sending to the message-box any message (A process referred to as 
\f1\b banging
\f0\b0 , from the 
\f1\b bang 
\f0\b0 object, \
and essentially meaning \'93run now\'94). The actual message sent by clicking the message-box will consist \
of a hidden selector of the symbol \'93int\'94, followed by a one item array where the first item is an integer \
atom. Similarly, banging a message containing multiple integers produces a selector of \'93list\'94, followed \
by an array of atoms. If one explicitly adds the selector \'93int\'94 or \'93list\'94 to the beginning of the \
message-box, the resulting message sent to the next connected object is no different.\
\
In order to respond to Max messages, a Max object must implement a handler method for the selector of the received message, though there is also the facility to handle messages generically, manually \
dispatching to handler functions. Thus execution in an Max object begins when a selector handler runs, and \
the message structure enables objects to provide a generic API to any other object that is the same as \
that used in visual patching. Message handlers are normally declared as returning void, as in normal \
execution an object does not respond to the object that triggered its execution, but instead passes on \
further messages out an \'93outlet\'94, or has some side effect. Most typically, an object completes its work \
by either updating state (a \'93cold\'94 operation) or by executing some calculation and then sending a new \
message with the results out an outlet (a \'93hot\'94 operation). Side effects can include updating internal \
state of an object, writing to accessible shared data structures (such as tables and buffers), or directly \
calling other objects through their methods. Thus, while the normal flow of execution is for objects to handle messages without returning values, and pass on further messages, it is possible for some objects to directly call methods on other objects, getting back a value. There are also global SDK functions that change the Max internal environment but  do not use the message passing signature. For example, there exists a global transport object, and it is possible for an object to directly change the global transport tempo.\
\
Extending Max thus consists of creating a new module file, that contains a data structure for object state, some boilerplate functions for class and object instantiation and destruction, and a series of message handling functions, with likely some message output functions. The external is compiled using the Max SDK, and can be added to a plugin directory that Max will scan on boot, allowing users to use the external in their patchers as if it was a core Max object. \
\
Scheme for Max is implemented as an external that embeds the s7 Scheme interpreter, with various message handlers implemented for both object operations (e.g. \'93reset\'94 or \'93read\'94) and handlers that translate Max data structures into s7 structures and then call s7 Scheme functions through the s7 foreign function interface.}
{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPS-BoldMT;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\froman\fcharset0 TimesNewRomanPS-ItalicMT;
}
{\colortbl;\red255\green255\blue255;\red255\green252\blue128;}
{\*\expandedcolortbl;;\csgenericrgb\c100000\c98700\c50000;}
\pard\tx720\sl312\slmult1\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 Section 2 -  Scripting and Extending Max\

\f1\b0 \
While visually programming Max (placing objects on the patcher canvas and connecting them with patch cords) is the most common paradigm for programming in Max, there exist several other options for programming interactive systems in the Max environment. The intent of Scheme for Max is to provide a compelling addition to these options, thus to appreciate where S4M succeeds, some awareness of the advantages and limitations of the others is necessary. Some of these are built in to Max itself, and some are externals available from 3
\fs18 \super rd
\fs28 \nosupersub  parties. These options can be broadly categorized as those that either: extend Max by compiling new native objects (C, C++, Gen);  interact with Max programmatically from an outside process (Node4Max, the shell object, various others); or extend Max by embedding an interpreter (JavaScript/JS, Csound, SuperCollider).  It should also be noted that of the embedded interpreter options, some (such as the JS object) provide facilities to interact with Max programmatically through the Max C layer, while others are aimed simply at embedding an alternate computer music environment to which messages are sent and from which audio is received (CSound, SuperCollider). S4M is in the former category, providing an embedded interpreter and rich facilities for interacting with the Max environment. In this section we will examine the most common options, and their advantages and disadvantages.\
\

\f0\b Compiled Externals
\f1\b0 \
The oldest method for programming Max outside of the patcher environment is to extend Max by writing an external in C. This has been available as part of Max since its inception, with a newer C++ API (the \'93min dev kit\'94) available since \cb2 TODO\cb1 . The advantages of this approach are that: one has complete access to the Max environment through a rich and well-documented application programming interface (API); one can write code that executes in any of the Max threads; and the compiled code runs as quickly as any other Max object. It is, in fact, functionally identical to a native Max object. The principal disadvantage is that the programming format used expose the programmer to much of the internal implementation of Max. This requires the developer to understand and work with Max internals in a level of detail far beyond other options. When compared to extending some other platforms, this is onerous and acts as a high barrier to entry. For example, creating an opcode for CSound (an analogous type of extension, but for the CSound music programming language) requires very little code: one writes the DSP routine necessary in C, and can largely be ignorant of how CSound internals works. In comparison, to create a new message or DSP handler in Max, one must understand how Max objects store state and the complex method for inter-object communication, and one must implement a large number of boilerplate methods. In addition, one must understand the Max threading model to avoid creating synchronization issues when methods are accessed from either thread. The result of this situation is that the C and C++ APIs are appropriate only for advanced programmers, and are, generally speaking, only a good solution for building a new object that one will reuse extensively. This approach is not practical for scripting Max with domain specific code created for one particular multi-media piece, and is thus not a viable alternative to visual patcher programming for creating functionality in a Max patch.\
\

\f0\b External Processes 
\f1\b0 \
At the opposite end of the spectrum from writing a Max external are options that enable the programmer to write code that is executed in an outside process, with messages to and from this process handled over an internal network. The Node4Max object (provided with Max) falls in this category, as do several other open source offerings such as \cb2 TODO\cb1 . In this scenario, a Max External object written in C/C++ acts as a proxy to the external process. Max messages are received by the proxy object, serialized to some format, and transmitted over the network, and vice versa for output. The proxy object thus gives the user the illusion of the object being part of Max\'92s own environment, but all interaction with the external language fundamentally uses asynchronous remote procedures and data transfer is limited to that which can be serialized and transmitted practically over the network. In the case of Node4Max, the \'93node.script\'94 object provides facilities to start and stop the external process from within the patcher, and provides facilities within its own API for interacting with Max dictionaries. Messages to the node.script object are serialized to JSON.\
\
The advantages of this approach are that one\'92s script may use whatever facilities the external process provides (i.e. any Node package installed on the operating system), and any long-running work is executed outside of the Max process and thus has no chance of blocking the rest of  Max processing, potentially resulting in audio drop-outs. Various open-source externals exist for interacting with outside processes, including Bash, Python, Common Lisp, and others. The disadvantages of this approach are several: one cannot use scripts developed on the external process in any timing critical operation; one cannot use them as part of a larger patcher workflow in which the deterministic order of patcher execution is critical; and one cannot interact with the Max environment directly (for example, writing to a table, or sending a message synchronously to some other object). These factors make this kind of scripting appropriate for interacting with the outside world where processing may take some time, such as opening files or making network requests, but unreliable for timing critical operations such as music sequencing or processing real-time MIDI or gestural input, and limited in terms of general control of the Max environment.\
\

\f0\b Embedded Interpreters\

\f1\b0 Given that Max externals are simply compiled from C, an external can host any interpreter that is implemented purely in C and provides an API for interacting with a C host through a foreign function interface. This category includes objects that embed both computer music domain languages, such as CSound, Chuck, and SuperCollider, as well as general purpose languages, such as JavaScript, Python,  and (now) Scheme. \
\
In the former category, the degree of integration between the hosted language and Max is limited, as the goal of the projects are not to provide an alternate method of scripting Max, but rather to allow audio generation in another computer music language to be used within a larger Max project. For example, the most mature of these is the csound~ object, and object embedding a CSound compiler. From a Max patch, one can send score events (musical event requests) to CSound, and receive audio back from Csound for further processing in Max. A Max external (the csound~ object), hosts and interacts with the CSound compiler using the CSound API, thus providing the ability for Max messages to the csound~ object to be translated into CSound events for processing by the CSound engine.  However, this external does not have the ability to change Max\'92s environment programmatically 
\f2\i from 
\f1\i0 the hosted Csound program, and thus fulfills a different need than Scheme For Max.\
\
In the second category, a general purpose language interpreter is embedded in a Max object, where the provides a foreign function interface between Max functionality, executed as C code in the external, and calls in the host language, evaluated in the embedded interpreter. The Max C API enables such  interactions with the Max environment as reading and writing to tables, buffers, dictionaries, and other internal data structures, interacting with the transport control, sending Max messages to other objects (that are not connected with Max patch cords), and interacting with the Max scheduler, among others. By far the mostly widely used of these is the JS object, a core Max component that embeds an ECMA5 interpreter, and includes a rich API for interacting with the Max SDK through JavaScript wrapper functions. The main purpose of these tools is to enable the Max user to programmatically interact with Max in a high level text-oriented language, thus enabling more elegant implementation of algorithms and programming patterns that are either cumbersome or impossible in the Max visual patching language, such as complex looping constructs and recursion. The purpose of Scheme For Max is to provide one such tool - one that is more musically useful and linguistically appropriate to Max than the existing other options. \
\
\
}